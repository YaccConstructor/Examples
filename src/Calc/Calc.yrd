{
open Calc.AST
}

tokens {
    _ of string
}

options {
    translate = true
    module = "Calc.Parser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

[<Start>]
program: stmts=(stmt SEMI)+ { 
let code = List.map (fun (st,semi) -> st) stmts
(code, vars, returnVal)
}

stmt:
   v=VAR EQ e=expr {
   let result = getValue e
   if vars.ContainsKey v then
     vars.[v] <- result
   else
     vars.Add(v, result)
   returnVal <- result
   EqStmt(v, e)
   }
   | e=expr {
   returnVal <- getValue e
   SingleExpr(e)
   }

binExpr<operand binOp>: h=operand tl=(binOp operand)* {
   List.fold calcFunc h tl
}

expr: binExpr<term termOp>

termOp: PLUS {Plus} | MINUS {Minus}

term: binExpr<factor factorOp>

factorOp: MULT {Mult} | DIV {Div}

factor: binExpr<powExpr powOp>

powOp: POW {Pow}

powExpr:
   n=NUMBER {Num (float n)}
   | v=VAR {EVar(v)}
   | LBRACE e=expr RBRACE {e}
   | MINUS e=powExpr {calcUnary Negate e}
   | SIN e=powExpr {calcUnary Sin e}
   | COS e=powExpr {calcUnary Cos e}
   | ABS e=powExpr {calcUnary Abs e}

