{
open Calc.AST
}

tokens {
    _ of string
}

options {
    translate = true
    module = "Calc.Parser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

[<Start>]
program: stmts=(stmt SEMI)+ { 
let code = List.map (fun (st,semi) -> st) stmts
(code, vars, returnVal)
}

stmt:
   v=VAR EQ e=expr {
   let result = getValue e
   if vars.ContainsKey v then
     vars.[v] <- result
   else
     vars.Add(v, result)
   returnVal <- result
   EqStmt(v, e)
   }
   | e=expr {
   returnVal <- getValue e
   SingleExpr(e)
   }

binExprLeft<operand binOp>: h=operand tl=(binOp operand)* {
   List.fold calcFuncLeft h tl
}

binExprRight<operand binOp>: h=(operand binOp)* tl=operand {
   List.fold calcFuncRight tl (List.rev h)
}

unExpr<operator operand>: f=operator s=operand {
   calcFuncUn f s
}

expr: binExprLeft<term termOp>

termOp: PLUS {Plus} | MINUS {Minus}

term: binExprLeft<factor factorOp>

factorOp: MULT {Mult} | DIV {Div}

factor: binExprRight<powExpr powOp>

powOp: POW {Pow} | KNUTH {Knuth(1)}

unOp: SIN {Sin} | COS {Cos} | ABS {Abs} | MINUS {Negate} 

powExpr: binExprRight<knuthExpr knuthOp>

knuthOp : KNUTH h=KNUTH+ { Knuth(getLength h) } 

knuthExpr:
   n=NUMBER {Num (float n)}
   | MINUS n=NUMBER {Num (-(float n))}
   | unExpr<unOp powExpr>
   | v=VAR {EVar(v)}
   | LBRACE e=expr RBRACE {e}