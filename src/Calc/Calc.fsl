{
module Calc.Lexer
open Microsoft.FSharp.Text.Lexing
open Calc.Parser

let lexeme lexbuf = LexBuffer<_>.LexemeString(lexbuf)
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']
let chars = ['a'-'z']


rule token = parse
| whitespace { token lexbuf }
| digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER(lexeme lexbuf)}
| '-' { MINUS(lexeme lexbuf) }
| 'K' { KNUTH(lexeme lexbuf) }
| "Abs" { ABS(lexeme lexbuf) }
| "Sin" { SIN(lexeme lexbuf) }
| "Cos" { COS(lexeme lexbuf) }
| '(' { LBRACE(lexeme lexbuf) }
| ')' { RBRACE(lexeme lexbuf)  }
| '/' { DIV(lexeme lexbuf) }
| '+' { PLUS(lexeme lexbuf) }
| "**" { POW(lexeme lexbuf) }
| '*' { MULT(lexeme lexbuf) }
| ';' { SEMI(lexeme lexbuf) }
| '=' { EQ(lexeme lexbuf) }
| chars+ { VAR(lexeme lexbuf) }
| eof { RNGLR_EOF ("")}
| _ {  failwithf "unexpected input: %s" <| string lexeme }