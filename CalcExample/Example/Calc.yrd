{
open Calc.AST
}

tokens {
    _ of string
}

options {
    translate = true
    module = "Calc.Parser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

[<Start>]
program: l=(sExpr SEMI)+ {List.map (fun (e,_) -> e) l}


binExpr<operand binOp>: h=operand tl=(binOp operand)* {List.fold (fun l (op,r) -> BinOp(op,l,r)) h tl}
  
sExpr: v=VAR EQ e=expr {Stmt(v, e)}
	|expr

expr: binExpr<term termOp> 

termOp: PLUS {Plus} | MINUS {Minus}

term: binExpr<factor factorOp>
     
factorOp: MULT {Mult} | DIV {Div}

factor: binExpr<powExpr powOp>

powOp: POW {Pow}

powExpr:
   n=NUMBER {Num (float n)}
   | v=VAR {EVar(v)}
   | LBRACE v=VAR EQ e=expr RBRACE {Stmt(v,e)}
   | LBRACE e=expr RBRACE {e}

